//////////////////////////////
// Private Breakpoint Variables
//////////////////////////////
$TXkgdmFyaWFibGUhIEdvIGF3YXkh: () !default;

//////////////////////////////
// Breakpoint Get Context
// $feature: Input feature to get it's current MQ context. Returns false if no context
//////////////////////////////
@function breakpoint-get-context($feature) {
  @each $context in $TXkgdmFyaWFibGUhIEdvIGF3YXkh {
    @if $feature == nth($context, 1) {
      @return nth($context, 2);
    }
  }

  @return false;
}

//////////////////////////////
// Private function to set context
//////////////////////////////
@function U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($feature, $value) {

  @if $value == 'monochrome' {
    $feature: 'monochrome';
  }

  $holder: () !default;
  $swap: false;

  @if length($TXkgdmFyaWFibGUhIEdvIGF3YXkh) > 0 {
    @each $item in $TXkgdmFyaWFibGUhIEdvIGF3YXkh {
      @if nth($item, 1) == $feature {
        $append: $feature;
        $append: join($append, $value, space);

        $holder: append($holder, $append, comma);

        $swap: true;
      }
      @else {
        $holder: append($holder, $item, comma);
      }
    }

    @if not $swap {
      $append: $feature;
      $append: join($append, $value, space);

      $holder: append($holder, $append, comma);
    }

    $TXkgdmFyaWFibGUhIEdvIGF3YXkh: $holder;
  }
  @else {
    $append: $feature;
    $append: join($append, $value, space);

    $TXkgdmFyaWFibGUhIEdvIGF3YXkh: append($TXkgdmFyaWFibGUhIEdvIGF3YXkh, $append, comma);
  }

  @return true;
}

//////////////////////////////
// Private function to reset context
//////////////////////////////
@mixin TXkgcmVzZXQhIEdvIGF3YXkh {
  $TXkgdmFyaWFibGUhIEdvIGF3YXkh: ();
}
