//////////////////////////////
// Default Variables
//////////////////////////////
$breakpoint-default-feature:  'min-width'     !default;
$breakpoint-default-media:    'all'           !default;
$breakpoint-force-media-all:  false           !default;
$breakpoint-default-pair:     'width'         !default;
$breakpoint-to-ems:           false           !default;
$breakpoint-prefixes:         'webkit' 'moz'  !default;
$breakpoint-prefixed-queries: 'device-pixel-ratio' 'min-device-pixel-ratio' 'max-device-pixel-ratio'                      !default;

$breakpoint-no-queries:       false           !default;
$breakpoint-no-query-wrappers: false           !default;

$breakpoint-base-font-size: false;

//////////////////////////////
// Import Breakpoint Helpers
//////////////////////////////
@import 'breakpoint/helpers';
@import 'breakpoint/context';

//////////////////////////////
// Breakpoint Mixin
//////////////////////////////
@mixin breakpoint($breakpoint, $base-font-size: $breakpoint-base-font-size) {
  $query: '' !default;

  // Reset Context
  @include TXkgcmVzZXQhIEdvIGF3YXkh;


  @if is_breakpoint_list($breakpoint) == false {
    $status: bp-generate($breakpoint, $base-font-size);
  }
  @else {
    @each $bkpt in $breakpoint {
      $status: bp-generate($bkpt, $base-font-size);
    }
  }

  @if breakpoint-prefix-needed() {
    // We will need to run this several times to do each prefixing.
    $query:  bp-print();

    @each $prefix in $breakpoint-prefixes {
      $prefixed_query: bp-print($prefix);

      $query: $query + unquote(", #{$prefixed_query}");
    }
  }
  @else {
    // This is a simple media query without prefixing.
    $query:  bp-print();
  }

  $no-query: breakpoint-get-context('no query');

  // Print out the query.
  @if $breakpoint-no-queries {
    @if $no-query {
      @if $breakpoint-no-query-wrappers and type-of($no-query) == string {
        #{$no-query} & {
          @content;
        }
      }
      @else {
        @content;
      }
    }
  }
  @else {
    @if $breakpoint-no-query-wrappers and type-of($no-query) == string {
      #{$no-query} & {
        @content;
      }
    }
    @if $query {
      @media #{$query} {
        @content;
      }
    }
  }

  // Final context reset.
  @include TXkgcmVzZXQhIEdvIGF3YXkh;
}

@function breakpoint-prefix-needed() {

  @each $breakpoint in $TXkgdmFyaWFibGUhIEdvIGF3YXkh {
    $feature: first_value_of($breakpoint);

    @if featureExists($feature, $breakpoint-prefixed-queries) {
      @return true;
    }
  }

  @return false;
}

@function bp-generate($breakpoint, $base-font-size) {

  $feature:       false !default;
  $min-feature:   "min-#{$breakpoint-default-pair}" !default;
  $max-feature:   "max-#{$breakpoint-default-pair}" !default;
  $value:         false !default;
  $min-value:     false !default;
  $max-value:     false !default;
  $length:        false !default;
  $query:         false !default;


  $length: length($breakpoint);

  @if first_value_of($breakpoint) == "no query" {
    // Special handler for no-query.
    @if $length == 1 {
      $context: UU2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh("no query", true);
    }
    @else {
      $context: UU2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh("no query", nth($breakpoint, 2));
    }
  }
  @else if first_value_of($breakpoint) == 'media' {
    // Special handler for media type.
    $media: reject($breakpoint, 'media');

    $context: UU2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh("media", $media);
  }
  @else if $length == 1 {
    $value: $breakpoint;
    @if type-of($breakpoint) == 'number' {
      $feature: $breakpoint-default-feature;
    }

    // If EM Breakpoints are active, do it!
    @if $breakpoint-to-ems and type-of($value) == 'number' {
      $value: breakpoint-to-base-em($value, $base-font-size);
    }

    // Set Context
    $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($feature, $value);
  }
  @else if $length == 2 {
    // If both are numbers, we've got a double!
    @if type-of(nth($breakpoint, 1)) == 'number' and type-of(nth($breakpoint, 2)) == 'number' {
      // See which is larger.
      @if nth($breakpoint, 1) > nth($breakpoint, 2) {
        $min-value: nth($breakpoint, 2);
        $max-value: nth($breakpoint, 1);
      }
      @else {
        $min-value: nth($breakpoint, 1);
        $max-value: nth($breakpoint, 2);
      }

      // If EM Breakpoints are active, do it!
      @if $breakpoint-to-ems and type-of($min-value) == 'number' {
        $min-value: breakpoint-to-base-em($min-value, $base-font-size);
      }
      @if $breakpoint-to-ems and type-of($max-value) == 'number' {
        $max-value: breakpoint-to-base-em($max-value, $base-font-size);
      }

      // Set Context
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($min-feature, $min-value);
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($max-feature, $max-value);
    }
    @else if type-of(nth($breakpoint, 1)) == 'string' and type-of(nth($breakpoint, 2)) == 'string' {
      @if breakpoint-string-value(nth($breakpoint, 1)) == true {
        $feature: nth($breakpoint, 1);
        $value: nth($breakpoint, 2);
      }
      @else {
        $feature: nth($breakpoint, 2);
        $value: nth($breakpoint, 1);
      }

      // If EM Breakpoints are active, do it!
      @if $breakpoint-to-ems and type-of($value) == 'number' {
        $value: breakpoint-to-base-em($value, $base-font-size);
      }

      // Set Context
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($feature, $value);
    }
    @else {
      // Because we can have either the first or second option be the feature, we switch on it.
      @if type-of(nth($breakpoint, 1)) == string {
        $feature: nth($breakpoint, 1);
        $value: nth($breakpoint, 2);
      }
      @else if type-of(nth($breakpoint, 2)) == string {
        $feature: nth($breakpoint, 2);
        $value: nth($breakpoint, 1);
      }

      // If EM Breakpoints are active, do it!
      @if $breakpoint-to-ems and type-of($value) == 'number' {
        $value: breakpoint-to-base-em($value, $base-font-size);
      }

      // Set Context
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($feature, $value);
    }
  }
  @else if $length == 3 {
    @if type-of(nth($breakpoint, 1)) == 'string' {
      $feature: nth($breakpoint, 1);
      // See which is larger.
      @if nth($breakpoint, 2) > nth($breakpoint, 3) {
        $min-value: nth($breakpoint, 3);
        $max-value: nth($breakpoint, 2);
      }
      @else {
        $min-value: nth($breakpoint, 2);
        $max-value: nth($breakpoint, 3);
      }
    }
    @else {
      $feature: nth($breakpoint, 3);
      // See which is larger.
      @if nth($breakpoint, 1) > nth($breakpoint, 2) {
        $min-value: nth($breakpoint, 2);
        $max-value: nth($breakpoint, 1);
      }
      @else {
        $min-value: nth($breakpoint, 1);
        $max-value: nth($breakpoint, 2);
      }
    }

    // If EM Breakpoints are active, do it!
    @if $breakpoint-to-ems and type-of($min-value) == 'number' {
      $min-value: breakpoint-to-base-em($min-value, $base-font-size);
    }
    @if $breakpoint-to-ems and type-of($max-value) == 'number' {
      $max-value: breakpoint-to-base-em($max-value, $base-font-size);
    }

    @if breakpoint-min-max($feature) == true {
      @if $feature == 'device-pixel-ratio' {
//        $min-feature: breakpoint-experimental('min-#{$feature}', $prefix);
//        $max-feature: breakpoint-experimental('max-#{$feature}', $prefix);
      }
      @else {
        $min-feature: 'min-#{$feature}';
        $max-feature: 'max-#{$feature}';
      }

      // Set Context
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($min-feature, $min-value);
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($max-feature, $max-value);
    }
    @else {
      @warn '#{$feature} cannot have a min/max value!';
    }
  }

  @return true;
}

@function bp-print($prefix: false) {
  $query: '' !default;

  $media:  breakpoint-get-context('media');

  // If media hasn't been set, then we set to default.
  @if $media == false {
    $media: $breakpoint-default-media;
  }

  @if $media != 'all' or $breakpoint-force-media-all {
    // Print out the media bit first.
    $query: unquote("#{$media} ");
  }

  @each $breakpoint in $TXkgdmFyaWFibGUhIEdvIGF3YXkh {
    $feature: first_value_of($breakpoint);

    @if $feature != 'media' and $feature != 'no query' {

      $value: nth($breakpoint, 2);

      @if $query != '' {
        $query: $query + unquote("and ");
      }
      $query: $query + bp-feature-print($feature, $value, $prefix);

    }
  }

  @return $query;
}


@function bp-feature-print($feature, $value, $prefix) {

  @if (featureExists($feature, $breakpoint-prefixed-queries) and $prefix) {
    $prefix_feature: breakpoint-experimental($feature, $prefix);
    @return unquote("(#{$prefix_feature}: #{$value}) ");
  }
  @else if $feature != 'monochrome' {
    @return unquote("(#{$feature}: #{$value}) ");
  }
  @else {
    @return unquote("(#{$value}) ");
  }
}
