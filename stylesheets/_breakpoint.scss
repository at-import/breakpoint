//////////////////////////////
// Default Variables
//////////////////////////////
$breakpoint-default-feature:  'min-width' !default;
$breakpoint-default-media:    'all'       !default;
$breakpoint-default-pair:     'width'     !default;
$breakpoint-to-ems:           false       !default;
$fix-breakpoint:              false       !default;

//////////////////////////////
// Breakpoint Mixin
//////////////////////////////
@mixin breakpoint($breakpoint, $media: $breakpoint-default-media) {
  // Query and Media String Defaults
  $query:         false !default;
  $query-holder:  false !default;
  $media-string:  false !default;

  // Holder for Count;
  $first:         true  !default;

  // Initialize Query String
  @if $media != 'all' {
    $media-string: "#{$media} ";
  }
  @else {
    $media-string: "";
  }

  // If we have a single query, let's just work with that.
  @if type-of(nth($breakpoint, 1)) != 'list' {
    $query: breakpoint-switch($breakpoint, $media-string, true);
  }
  @else {
    @each $bkpt in $breakpoint {
      @if $first == true {
        $query: breakpoint-switch($bkpt, $media-string, true);
        $first: false;
      }
      @else {
        $query: join($query, breakpoint-switch($bkpt, $media-string));
      }
    }
  }

  // If we're outputting for a fixed breakpoint…
  @if $fix-breakpoint {
    // … and if we should apply these rules…
    @if $fix-breakpoint >= nth(breakpoint-values($breakpoint), 1) {
      // … output the content the user gave us.
      @content;
    }
  } @else {
    // Otherwise, output it using a regular media query.
    @media #{$query} {
      @content;
    }
  }
}

@function breakpoint-values($breakpoint) {
  // See which is larger.
  @if length($breakpoint) > 1 {
    $min-value: 0;
    $max-value: 0;

    @if nth($breakpoint, 1) > nth($breakpoint, 2) {
      $min-value: nth($breakpoint, 2);
      $max-value: nth($breakpoint, 1);
    }
    @else {
      $min-value: nth($breakpoint, 1);
      $max-value: nth($breakpoint, 2);
    }

    @return $min-value, $max-value;
  } @else {
    @return $breakpoint;
  }
}

@function breakpoint-switch($breakpoint, $media-string, $first: false) {
  // Feature/Value/Length/Query Placehoders:
  $feature:       false !default;
  $min-feature:   "min-#{$breakpoint-default-pair}" !default;
  $max-feature:   "max-#{$breakpoint-default-pair}" !default;
  $value:         false !default;
  $min-value:     false !default;
  $max-value:     false !default;
  $length:        false !default;
  $query:         false !default;

  $length: length($breakpoint);
  // Check to see if there is only one item.
  @if $length == 1 {
    $value: $breakpoint;
    @if type-of($breakpoint) == 'number' {
      $feature: $breakpoint-default-feature;
    }

    // If EM Breakpoints are active, do it!
    @if $breakpoint-to-ems and type-of($value) == 'number' {
      $value: breakpoint-to-base-em($value);
    }
    // Build the Query
    $query: breakpoint-generate($media-string, $feature, $value, $first);
  }
  @else if $length == 2 {
    // If both are numbers, we've got a double!
    @if type-of(nth($breakpoint, 1)) == 'number' and type-of(nth($breakpoint, 2)) == 'number' {
      $min-value: nth(breakpoint-values($breakpoint), 1);
      $max-value: nth(breakpoint-values($breakpoint), 2);

      // If EM Breakpoints are active, do it!
      @if $breakpoint-to-ems and type-of($min-value) == 'number' {
        $min-value: breakpoint-to-base-em($min-value);
      }
      @if $breakpoint-to-ems and type-of($max-value) == 'number' {
        $max-value: breakpoint-to-base-em($max-value);
      }

      // Min/Max for given
      $query: breakpoint-generate($media-string, $min-feature, $min-value, $first);
      $query: join($query, breakpoint-generate($media-string, $max-feature, $max-value));
    }
    @else if type-of(nth($breakpoint, 1)) == 'string' and type-of(nth($breakpoint, 2)) == 'string' {
      @if breakpoint-string-value(nth($breakpoint, 1)) == true {
        $feature: nth($breakpoint, 1);
        $value: nth($breakpoint, 2);
      }
      @else {
        $feature: nth($breakpoint, 2);
        $value: nth($breakpoint, 1);
      }

      // If EM Breakpoints are active, do it!
      @if $breakpoint-to-ems and type-of($value) == 'number' {
        $value: breakpoint-to-base-em($value);
      }

      // Build the Query
      $query: breakpoint-generate($media-string, $feature, $value, $first);
    }
    @else {
      // Because we can have either the first or second option be the feature, we switch on it.
      @if type-of(nth($breakpoint, 1)) == string {
        $feature: nth($breakpoint, 1);
        $value: nth($breakpoint, 2);
      }
      @else if type-of(nth($breakpoint, 2)) == string {
        $feature: nth($breakpoint, 2);
        $value: nth($breakpoint, 1);
      }

      @if $feature == 'device-pixel-ratio' or $feature == 'min-device-pixel-ratio' or $feature == 'max-device-pixel-ratio' {
        $value: 96 * $value * 1dpi;
        @if $feature == 'device-pixel-ratio' {
          $feature: 'resolution';
        }
        @else if $feature == 'min-device-pixel-ratio' {
          $feature: 'min-resolution';
        }
        @else if $feature == 'max-device-pixel-ratio' {
          $feature: 'max-resolution';
        }
      }

      // If EM Breakpoints are active, do it!
      @if $breakpoint-to-ems and type-of($value) == 'number' {
        $value: breakpoint-to-base-em($value);
      }

      // Build the Query
      $query: breakpoint-generate($media-string, $feature, $value, $first);
    }
  }
  @else if $length == 3 {
    @if type-of(nth($breakpoint, 1)) == 'string' {
      $feature: nth($breakpoint, 1);
      // See which is larger.
      @if nth($breakpoint, 2) > nth($breakpoint, 3) {
        $min-value: nth($breakpoint, 3);
        $max-value: nth($breakpoint, 2);
      }
      @else {
        $min-value: nth($breakpoint, 2);
        $max-value: nth($breakpoint, 3);
      }
    }
    @else {
      $feature: nth($breakpoint, 3);
      // See which is larger.
      @if nth($breakpoint, 1) > nth($breakpoint, 2) {
        $min-value: nth($breakpoint, 2);
        $max-value: nth($breakpoint, 1);
      }
      @else {
        $min-value: nth($breakpoint, 1);
        $max-value: nth($breakpoint, 2);
      }
    }

    @if $feature == 'device-pixel-ratio' {
      $min-value: 96 * $min-value * 1dpi;
      $max-value: 96 * $max-value * 1dpi;
      $feature: 'resolution';
    }

    // If EM Breakpoints are active, do it!
    @if $breakpoint-to-ems and type-of($min-value) == 'number' {
      $min-value: breakpoint-to-base-em($min-value);
    }
    @if $breakpoint-to-ems and type-of($max-value) == 'number' {
      $max-value: breakpoint-to-base-em($max-value);
    }

    @if breakpoint-min-max($feature) == true {
      $min-feature: 'min-#{$feature}';
      $max-feature: 'max-#{$feature}';

      // Min/Max for given
      $query: breakpoint-generate($media-string, $min-feature, $min-value, $first);
      $query: join($query, breakpoint-generate($media-string, $max-feature, $max-value));
    }
    @else {
      @warn '#{$feature} cannot have a min/max value!';
    }
  }

  @return $query;
}

@function breakpoint-generate($media, $feature, $value, $first: false) {
  // Media Query string to be returned
  $new-string: "";

  // If it's the first item, it gets special treatment
  @if $first == true {
    // And Statement
    $and: 'and ';
    // If $media is blank (i.e. all), remove and statement
    @if $media == '' {
      $and: '';
    }

    @if $feature != false {
      $new-string: #{$media}unquote("#{$and}(#{$feature}: #{$value})");
    }
    @else {
      $new-string: #{$media}unquote("#{$and}(#{$value})");
    }
  }

  @else {
    @if $feature != false {
      $new-string: unquote("and (#{$feature}: #{$value})");
    }
    @else {
      $new-string: unquote("and (#{$value})");
    }
  }

  @return $new-string;
}

@function breakpoint-to-base-em($value) {
  $unit: unit($value);

  @if $unit == 'px' {
    @return $value / 16px * 1em;
  }
  @else if $unit == '%' {
    @return $value / 100% * 1em;
  }
  @else if $unit == 'em' {
    @return $value;
  }
  @else if $unit == 'pt' {
    @return $value / 12pt * 1em;
  }
  @else {
    @return $value;
//    @warn 'Everything is terrible! What have you done?!';
  }
}

@function breakpoint-min-max($feature) {
  @if $feature == 'color' or $feature == 'color-index' or $feature == 'aspect-ratio' or $feature == 'device-height' or $feature == 'device-width' or $feature == 'height' or $feature == 'monochrome' or $feature == 'resolution' or $feature == 'width' or $feature == 'device-pixel-ratio' {
    @return true;
  }
  @else {
    @return false;
  }
}

@function breakpoint-string-value($feature) {
  @if $feature == 'orientation' or $feature == 'scan' or $feature == 'color' {
    @return true;
  }
  @else {
    @return false;
  }
}