// experimental - depends on Sass 3.2 or higher
// define your own breakpoints
// styles nested in the mixin will pass thru in @content
// resist the urge to settle on common device sizes
// http://marcdrummond.com/responsive-web-design/2011/12/29/default-breakpoints-are-dead

////////////////////////////
// BREAKPOINT
// breakpoint($breakpoint, $media: 'screen')
//
// // create $breakpoint variables like so
// // assume $breakpoint-default-feature if only a number
// $breakpoint1: 500px
// $breakpoint2: 30em
// // set min-width/max-width if both values are numbers
// $breakpoint3: 500px 700px
// // set min/max of feature if there are two numbers
// $breakpoint4: 400px 700px 'height'
// // if one value is a string, assume a feature/value pair
// $breakpoint5: min-width 700px
// $breakpoint6: max-width 700px
// // for multidimensional lists, assume each item is a feature/value pair
// $breakpoint7: max-width 700px, orientation portrait
// // handle one-sided features (ie. monochrome)
// $breakpoint8: max-width 700px, orientation portrait, monochrome
// $breakpoint9: monochrome
////////////////////////////

$breakpoint-default-feature: min-width !default;

@function breakpoint-concatenate($query-string, $new-value, $feature: $breakpoint-default-feature) {
  $new-string: "";
  @if $feature != false {
    $new-string: #{$query-string}unquote("and (#{$feature}:  #{$new-value}) ");
  }
  @else {
    $new-string: #{$query-string}unquote("and (#{$new-value}) ");
  }
  @return $new-string;
}

@mixin breakpoint($breakpoint, $media: "screen") {
  // Feature/Value Placeholders
  $feature:               false !default;
  $value:                 false !default;
  // Prefixed Queries
  $webkit-query-string:   false !default;
  $moz-query-string:      false !default;
  $ms-query-string:       false !default;
  $o-query-string:        false !default;
//  @debug $breakpoint;
  // initialize string
  $query-string: "#{$media} ";
  @if type-of($breakpoint) == number {
    // assume max-width if only a number
    $query-string: breakpoint-concatenate($query-string, $breakpoint);
  }
  @if type-of($breakpoint) == string {
    // handle one-sided features (ie. monochrome)
    $query-string: breakpoint-concatenate($query-string, $breakpoint, false);
  }
  @else if type-of($breakpoint) == list {
    // set min/max if both values are numbers
    @if type-of(nth($breakpoint, 1)) == number and type-of(nth($breakpoint, 2)) == number {
      // Optionally pass in 3rd parameter 
      @if length($breakpoint) == 3 and breakpoint-min-max(nth($breakpoint, 3)) {
        // Device Pixel Ratio is fracking weird, need to handle it three different ways
        @if nth($breakpoint, 3) == 'device-pixel-ratio' {
          // Webkit
          $webkit-query-string: breakpoint-concatenate($query-string, nth($breakpoint, 1), "-webkit-min-#{nth($breakpoint, 3)}");
          $webkit-query-string: breakpoint-concatenate($webkit-query-string, nth($breakpoint, 2), "-webkit-min-#{nth($breakpoint, 3)}");
          // Mozilla
          $moz-query-string: breakpoint-concatenate($query-string, nth($breakpoint, 1), "min--moz-#{nth($breakpoint, 3)}");
          $moz-query-string: breakpoint-concatenate($moz-query-string, nth($breakpoint, 2), "max--moz-#{nth($breakpoint, 3)}");
          // Opera
          $o-query-string: breakpoint-concatenate($query-string, '#{numerator(nth($breakpoint, 1))}/#{denominator(nth($breakpoint, 1))}', "-o-min-#{nth($breakpoint, 3)}");
          $o-query-string: breakpoint-concatenate($o-query-string, '#{numerator(nth($breakpoint, 2))}/#{denominator(nth($breakpoint, 2))}', "-o-max-#{nth($breakpoint, 3)}");
        }
        // Min/Max for given 
        $query-string: breakpoint-concatenate($query-string, nth($breakpoint, 1), "min-#{nth($breakpoint, 3)}");
        $query-string: breakpoint-concatenate($query-string, nth($breakpoint, 2), "max-#{nth($breakpoint, 3)}");
      }
      @else {
        @if length($breakpoint) == 3 and breakpoint-min-max(nth($breakpoint, 3)) != true {
          @warn '#{nth($breakpoint, 3)} does not accept a min/max value.'
        }
        $query-string: breakpoint-concatenate($query-string, nth($breakpoint, 1), "min-width");
        $query-string: breakpoint-concatenate($query-string, nth($breakpoint, 2), "max-width");
      }
      
      
    }
    @else if type-of(nth($breakpoint, 1)) == string or type-of(nth($breakpoint, 2)) == string {
      // if one value is a string, assume a feature/value pair
      // Because we can have either the first or second option be the feature, we switch on it.
      @if type-of(nth($breakpoint, 1)) == string {
        $feature: nth($breakpoint, 1);
        $value: nth($breakpoint, 2);
      }
      @else if type-of(nth($breakpoint, 2)) == string {
        $feature: nth($breakpoint, 2);
        $value: nth($breakpoint, 1);
      }
      // If the feature is device-pixel-ratio, it's gonna be weird
      @if $feature == 'device-pixel-ratio' {
        // Webkit
        $webkit-query-string: breakpoint-concatenate($query-string, $value, "-webkit-#{$feature}");
        // Mozilla
        $moz-query-string: breakpoint-concatenate($query-string, $value, "-moz-#{$feature}");
        // Opera
        $o-query-string: breakpoint-concatenate($query-string, '#{numerator($value)}/#{denominator($value)}', "-o-#{$feature}");
      }
      $query-string: breakpoint-concatenate($query-string, $value, $feature);
    }
    @else if type-of(nth($breakpoint, 1)) == list {
      // for multidimensional lists, assume each item is a feature value pair
      @each $item in $breakpoint {
        @if type-of($item) == list {
          // $query-string: #{$query-string}unquote("and (#{nth($item, 1)}:  #{nth($item, 2)}) ")
          $query-string: breakpoint-concatenate($query-string, nth($item, 2), nth($item, 1));
        }
        @else {
          // handle one-sided features (ie. monochrome)
          $query-string: breakpoint-concatenate($query-string, $item, false);
        }
      }
    }
  }
  // write out the media query
  @media #{$query-string} {
    @content;
  }
  @if $webkit-query-string {
    @media #{$webkit-query-string} {
      @content;
    }
  }
  @if $moz-query-string {
    @media #{$moz-query-string} {
      @content;
    }
  }
  @if $ms-query-string {
    @media #{$ms-query-string} {
      @content;
    }
  }
  @if $o-query-string {
    @media #{$o-query-string} {
      @content;
    }
  }
}

@function breakpoint-min-max($feature) {
  @if $feature == 'color' or $feature == 'color-index' or $feature == 'aspect-ratio' or $feature == 'device-height' or $feature == 'device-width' or $feature == 'height' or $feature == 'monochrome' or $feature == 'resolution' or $feature == 'width' or $feature == 'device-pixel-ratio' {
    @return true;
  }
  @else {
    @return false;
  }
}