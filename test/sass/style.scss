// path to local mixin
@import "../../stylesheets/breakpoint";
// @import "breakpoint";

// SETTINGS
$breakpoint-to-ems: true;
//$breakpoint-force-media-all: true;
//$breakpoint-default-feature: min-width !default;


// TESTS

$single-pixel-value: 500px;
$single-em-value: 30em;
/*
 * Assume $breakpoint-default-feature
 * if only a number
 * $single-pixel-value: #{$single-pixel-value};
 * $single-em-value: #{$single-em-value};
 */
.breakpoint-default-feature {
  @include breakpoint($single-pixel-value) {
    content: '$single-pixel-value';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (min-width: 31.25em)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (min-width: 500px)';
  }
  @include breakpoint($single-em-value) {
    content: '$single-em-value';
    content: '@media (min-width: 30em)';
  }
}


$feature-first: height 500px ;
$value-first: 500px height;
$arbitrary-feature: lion 500px;
$feature-value-both-strings: portrait orientation;
/*
 * Single value with feature
 * $feature-first : #{$feature-first};
 * $value-first : #{$value-first};
 * $arbitrary-feature : #{$arbitrary-feature};
 * $feature-value-both-strings : #{$feature-value-both-strings};
 */
.feature-value-pair {
  @include breakpoint($feature-first) {
    content: '$feature-first';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (height: 31.25em)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (height: 500px)';
  }
  @include breakpoint($value-first) {
    content: '$value-first';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (height: 31.25em)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (height: 500px)';
  }
  @include breakpoint($arbitrary-feature) {
    content: '$arbitrary-feature';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (lion: 31.25em)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (lion: 500px)';
  }
  @include breakpoint($feature-value-both-strings) {
    content: '$feature-value-both-strings';
    content: '@media (orientation: portrait)';
  }
}


$min-max-default-feature: 500px 700px;
/*
 * Set min-width/max-width
 * if both values are numbers
 * $min-max-default-feature : #{$min-max-default-feature};
 */
.min-max-default-feature {
  @include breakpoint($min-max-default-feature) {
    content: '$min-max-default-feature';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (min-width: 31.25em) and (max-width: 43.75em)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (min-width: 500px) and (max-width: 700px)';
  }
}


$feature-min-max: height 300px 700px;
$min-max-feature: 300px 700px height;
$invalid-feature-min-max: lion 300px 700px;
/*
 * Set min/max of feature
 * if there are two numbers and a feature
 * $feature-min-max : #{$feature-min-max};
 * $min-max-feature : #{$min-max-feature};
 * $invalid-feature-min-max : #{$invalid-feature-min-max};
 */
.min-max-feature {
  @include breakpoint($feature-min-max) {
    content: '$feature-min-max';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (min-height: 18.75em) and (max-height: 43.75em)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (min-height: 300px) and (max-height: 700px)';
  }
  @include breakpoint($min-max-feature) {
    content: '$min-max-feature';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (min-height: 18.75em) and (max-height: 43.75em)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (min-height: 300px) and (max-height: 700px)';
  }
  // @include breakpoint($invalid-feature-min-max) {
  //   content: '$invalid-feature-min-max';
  //   content: 'THROWS UNRECOVERABLE ERROR';
  // }
}


$multidimensional: max-width 700px, orientation portrait;
/*
 * Multidimensional lists,
 * assume each item is a feature value pair
 * $multidimensional : #{$multidimensional};
 */
.multidimensional {
  @include breakpoint($multidimensional) {
    content: '$multidimensional';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (max-width: 43.75em) and (orientation: portrait)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (max-width: 700px) and (orientation: portrait)';
  }
}


$dpr-min-max: device-pixel-ratio 1.5 1;
$min-max-dpr: 1.5 1 device-pixel-ratio;
$min-dpr: min-device-pixel-ratio 2;
$dpr-min: 2 min-device-pixel-ratio;
$namespace-dpr: -webkit-device-pixel-ratio 3;
/*
 * Device-pixel-ratio conversion,
 * $dpr-min-max : #{$dpr-min-max};
 * $min-max-dpr : #{$min-max-dpr};
 * $min-dpr : #{$min-dpr};
 * $dpr-min : #{$dpr-min};
 * $namespace-dpr : #{$namespace-dpr};
 */
.device-pixel-ratio {
  @include breakpoint($dpr-min-max) {
    content: '$dpr-min-max';
    content: '@media (-webkit-min-device-pixel-ratio: 1) and (-webkit-max-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1) and (max--moz-device-pixel-ratio: 1.5)';
  }
  @include breakpoint($min-max-dpr) {
    content: '$min-max-dpr';
    content: '@media (-webkit-min-device-pixel-ratio: 1) and (-webkit-max-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1) and (max--moz-device-pixel-ratio: 1.5)';
  }
  @include breakpoint($min-dpr) {
    content: '$min-dpr';
    content: '@media (-webkit-min-device-pixel-ratio: 2), (min--moz-device-pixel-ratio: 2)';
  }
  @include breakpoint($namespace-dpr) {
    content: '$namespace-dpr';
    content: '@media (-webkit-device-pixel-ratio: 3)';
  }
}


$monochrome: monochrome;
$multidimensional-plus-one-sided: max-width 700px, orientation portrait, monochrome;
/*
 * One-sided features (ie. monochrome)
 * $monochrome : #{$monochrome};
 * $multidimensional-plus-one-sided : #{$multidimensional-plus-one-sided};
 */
.one-sided {
  @include breakpoint($monochrome) {
    content: '$monochrome';
    content: '@media (monochrome)';
  }
  @include breakpoint($multidimensional-plus-one-sided) {
    content: '$multidimensional-plus-one-sided';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (max-width: 43.75em) and (orientation: portrait) and (monochrome)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (max-width: 700px) and (orientation: portrait) and (monochrome)';
  }
}


$complex: 300px 400px 'height',
            500px 600px,
            monochrome,
            orientation portrait,
            1 2 device-pixel-ratio,
            700px,
            192dpi resolution;
/*
 * Large, Complex Media Query
 * $complex : #{$complex};
 */
.complex {
  @include breakpoint($complex) {
    content: '$complex';
    content: 'if $breakpoint-to-ems: true';
    content: '@media (min-height: 18.75em) and (max-height: 25em) and (min-width: 31.25em) and (max-width: 37.5em) and (monochrome) and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 1) and (-webkit-max-device-pixel-ratio: 2) and (min-width: 43.75em) and (resolution: 192dpi), (min-height: 18.75em) and (max-height: 25em) and (min-width: 31.25em) and (max-width: 37.5em) and (monochrome) and (orientation: portrait) and (min--moz-device-pixel-ratio: 1) and (max--moz-device-pixel-ratio: 2) and (min-width: 43.75em) and (resolution: 192dpi)';
    content: 'if $breakpoint-to-ems: false';
    content: '@media (min-height: 300px) and (max-height: 400px) and (min-width: 500px) and (max-width: 600px) and (monochrome) and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 1) and (-webkit-max-device-pixel-ratio: 2) and (min-width: 700px) and (resolution: 192dpi), (min-height: 300px) and (max-height: 400px) and (min-width: 500px) and (max-width: 600px) and (monochrome) and (orientation: portrait) and (min--moz-device-pixel-ratio: 1) and (max--moz-device-pixel-ratio: 2) and (min-width: 700px) and (resolution: 192dpi)';
  }
}


$override-base-font-size: 30em;
/*
 * Override $base-font-size
 * for calculating breakpoint-to-ems
 * $override-base-font-size : #{$override-base-font-size};
 */
.override-base-font-size {
  @include breakpoint($override-base-font-size, $base-font-size: 14px) {
    content: '$override-base-font-size, $base-font-size: 14px';
    content: '@media (min-width: 34.28571em)';
  }
}


$get-context-test-value: 500px;
$get-context-test-value-complex: 300px 400px 'height',
            500px 600px,
            monochrome,
            orientation portrait,
            1 2 device-pixel-ratio,
            192dpi resolution;
/*
 * Get context
 * $get-context-test-value : #{$get-context-test-value};
 * $get-context-test-value-complex : #{$get-context-test-value-complex};
 */
@mixin my-background {
  /* @mixin my-background */
  $min-width-context: breakpoint-get-context('min-width');
  // @debug $min-width-context;
  @if $min-width-context > 30em {
    /* $min-width-context > 30em */
    background: purple;
  }
  @else {
    /* $min-width-context !> 30em */
    background: red;
  }
}
.get-context {
  @include breakpoint($get-context-test-value) {
    content: '$get-context-test-value';
    content: "breakpoint-get-context('min-width'):; #{breakpoint-get-context('min-width')}";
  }
  @include breakpoint($get-context-test-value-complex) {
    content: '$get-context-test-value-complex';
    content: "breakpoint-get-context('min-height') - #{breakpoint-get-context('min-height')}";
    content: "breakpoint-get-context('max-height') - #{breakpoint-get-context('max-height')}";
    content: "breakpoint-get-context('min-width') - #{breakpoint-get-context('min-width')}";
    content: "breakpoint-get-context('max-width') - #{breakpoint-get-context('max-width')}";
    content: "breakpoint-get-context('monochrome') - #{breakpoint-get-context('monochrome')}";
    content: "breakpoint-get-context('orientation') - #{breakpoint-get-context('orientation')}";
    content: "breakpoint-get-context('-webkit-max-device-pixel-ratio') - #{breakpoint-get-context('-webkit-max-device-pixel-ratio')}";
    content: "breakpoint-get-context('resolution') - #{breakpoint-get-context('resolution')}";
    @include my-background;
  }
}


$no-query-test-value: 500px;
/*
 * No Query Options
 * $no-query-test-value : #{$no-query-test-value};
 */
.test-media-query-support {
  content: 'style before the media query';
  @include breakpoint($no-query-test-value, $no-query: true) {
    content: '$no-query: true';
    content: 'style within a media query, also intended for non-mq browsers';
  }
  @include breakpoint($no-query-test-value, $no-query: ".no-query") {
    content: '$no-query: ".no-query"';
    content: 'style within a media query, also nested in a .no-query selector';
  }
}
